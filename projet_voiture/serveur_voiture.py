#!/usr/bin/env python3
"""
serveur_voiture.py
------------------
Ce module fournit une interface web via Flask pour contr√¥ler la voiture.
Les actions possibles incluent la rotation sur place, le r√©initialisation et
l'avanc√©e de la voiture.

Auteur : Anthony Vergeylen
Date   : 08-04-2025
Quoi   : Permet de contr√¥ler la voiture via une interface web.
"""

from flask import Flask, render_template, request, redirect, url_for
import threading
import time
from moteur import MotorController  # Module personnalis√© pour contr√¥ler les moteurs
import RPi.GPIO as GPIO


class VoitureController:
    """
    Classe pour contr√¥ler les mouvements de la voiture.
    
    QUI: Anthony Vergeylen
    QUAND: 08-04-2025
    QUOI: Fournit des m√©thodes pour manipuler la voiture, notamment la rotation sur place.
    """
    def __init__(self, duration=10, speed=100):
        """
        Initialise le contr√¥leur de la voiture.
        
        :param duration: Dur√©e de la rotation en secondes (par d√©faut : 10).
        :param speed: Vitesse de rotation (entre 0 et 100, par d√©faut : 100).
        
        QUI: Anthony Vergeylen
        QUAND: 08-04-2025
        QUOI: Pr√©pare l'instance pour contr√¥ler les moteurs de la voiture.
        """
        self.duration = duration
        self.speed = speed
        self.motor = MotorController()

    def tourner_sur_place(self):
        """
        Fait tourner la voiture sur elle-m√™me pendant la dur√©e sp√©cifi√©e.
        
        QUI: Anthony Vergeylen
        QUAND: 08-04-2025
        QUOI: Active les moteurs pour faire tourner la voiture sur elle-m√™me, puis arr√™te le mouvement.
        """
        try:
            print("üîÅ Rotation sur place...")
            # Calcul de la valeur PWM en fonction de la vitesse
            pwm_val = self.motor._MotorController__scale_speed(self.speed)
            # Faire tourner la voiture : un moteur en avant et l'autre en arri√®re
            self.motor._MotorController__apply_motor_state(
                self.motor._MotorController__moteur0_pin_a,
                self.motor._MotorController__moteur0_pin_b,
                pwm_val
            )
            self.motor._MotorController__apply_motor_state(
                self.motor._MotorController__moteur1_pin_a,
                self.motor._MotorController__moteur1_pin_b,
                -pwm_val
            )
            time.sleep(self.duration)
            print("üõë Arr√™t du mouvement")
            self.motor.stop()
        except Exception as e:
            print("Erreur pendant la rotation :", e)
        finally:
            GPIO.cleanup()
            print("Nettoyage des GPIO termin√©.")


class VoitureServer:
    """
    Classe pour g√©rer le serveur web de contr√¥le de la voiture.
    
    QUI: Anthony Vergeylen
    QUAND: 08-04-2025
    QUOI: Permet d'interagir avec la voiture via une interface web et d'ex√©cuter les actions correspondantes.
    """
    def __init__(self, host='0.0.0.0', port=5000):
        """
        Initialise le serveur web et configure les routes Flask.
        
        :param host: Adresse IP pour h√©berger le serveur (par d√©faut : '0.0.0.0').
        :param port: Port pour le serveur (par d√©faut : 5000).
        
        QUI: Anthony Vergeylen
        QUAND: 08-04-2025
        QUOI: Pr√©pare l'application Flask et associe les routes aux actions du contr√¥leur de la voiture.
        """
        self.host = host
        self.port = port
        self.app = Flask(__name__)
        self.controller = VoitureController()
        self._setup_routes()

    def _setup_routes(self):
        """
        Configure les routes pour l'application Flask.
        
        QUI: Anthony Vergeylen
        QUAND: 08-04-2025
        QUOI: D√©finit les points d'acc√®s HTTP pour l'interface utilisateur.
        """
        self.app.add_url_rule('/', view_func=self.index)
        self.app.add_url_rule('/action', view_func=self.handle_action, methods=['POST'])

    def index(self):
        """
        Affiche la page d'accueil contenant l'interface web.
        
        QUI: Anthony Vergeylen
        QUAND: 08-04-2025
        QUOI: Retourne le template 'web.html' pour l'interaction utilisateur.
        """
        return render_template('web.html')

    def handle_action(self):
        """
        Traite les actions envoy√©es via le formulaire web.
        
        Les actions g√©r√©es sont :
          - 'lancer' : Lancer la rotation sur place dans un thread s√©par√©.
          - 'reset'  : (√Ä impl√©menter) R√©initialiser et relancer la voiture.
          - 'avancer': (√Ä impl√©menter) Faire avancer la voiture.
        
        QUI: Anthony Vergeylen
        QUAND: 08-04-2025
        QUOI: Ex√©cute la fonction appropri√©e selon l'action demand√©e par l'utilisateur.
        """
        action = request.form.get('action')
        if action == 'lancer':
            print("üöÄ Lancement de la voiture")
            # D√©marrer la rotation sur place dans un thread pour ne pas bloquer le serveur Flask
            thread = threading.Thread(target=self.controller.tourner_sur_place)
            thread.start()
        elif action == 'reset':
            print("üîÑ R√©initialisation et relancement")
            # Logique de r√©initialisation √† impl√©menter
        elif action == 'avancer':
            print("‚û°Ô∏è Avancer la voiture")
            # Logique pour faire avancer la voiture √† impl√©menter
        return redirect(url_for('index'))

    def run(self):
        """
        D√©marre le serveur web Flask sur l'adresse et le port sp√©cifi√©s.
        
        QUI: Anthony Vergeylen
        QUAND: 08-04-2025
        QUOI: Lance le serveur pour l'acc√®s via un navigateur.
        """
        print(f"üåê Lancement du serveur web sur {self.host}:{self.port}")
        self.app.run(host=self.host, port=self.port)


if __name__ == '__main__':
    server = VoitureServer()
    server.run()

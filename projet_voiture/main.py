#!/usr/bin/env python3
"""
main.py
-------
Ce script orchestre le lancement du serveur web, du d√©tecteur de couleur RGB
et du contr√¥le autonome de la voiture. Chaque fonctionnalit√© est encapsul√©e
dans une classe d√©di√©e pour assurer une meilleure modularit√© et une maintenance facilit√©e.

QUI: Vergeylen Anthony
QUAND: 09-04-2025
"""

import time
import threading
import board
import busio
import adafruit_tcs34725

from CarController import CarController
from serveur_voiture import app

class RGBSensorController:
    """
    Classe pour g√©rer le capteur RGB, effectuer la calibration et surveiller la couleur ambiante.
    
    QUI: Vergeylen Anthony
    QUAND: 09-04-2025
    QUOI: Initialise le capteur RGB, r√©alise une calibration pour obtenir les valeurs de r√©f√©rence,
          puis d√©tecte en continu la couleur dominante afin de d√©clencher une action.
    """
    def __init__(self, threshold=5, integration_time=100, calibration_duration=5):
        """
        Initialise le capteur RGB et d√©finit les param√®tres de calibration.

        :param threshold: Seuil de variation pour consid√©rer une nouvelle mesure (par d√©faut 5).
        :param integration_time: Temps d'int√©gration du capteur en millisecondes (par d√©faut 100).
        :param calibration_duration: Dur√©e de la phase de calibration en secondes (par d√©faut 5).

        QUI: Vergeylen Anthony
        QUAND: 09-04-2025
        QUOI: Configure le capteur et initialise les param√®tres pour la d√©tection de couleur.
        """
        self.threshold = threshold
        self.integration_time = integration_time
        self.calibration_duration = calibration_duration

        # Initialisation du bus I2C et du capteur RGB
        self.i2c = busio.I2C(board.SCL, board.SDA)
        self.sensor = adafruit_tcs34725.TCS34725(self.i2c)
        self.sensor.enable = True
        self.sensor.integration_time = integration_time

        # Variables de calibration
        self.ref_r = None
        self.ref_g = None
        self.ref_b = None

    def calibrate(self):
        """
        Effectue la calibration du capteur RGB pendant une dur√©e sp√©cifi√©e pour obtenir
        les valeurs de r√©f√©rence (ref_r, ref_g, ref_b).

        QUI: Vergeylen Anthony
        QUAND: 09-04-2025
        QUOI: Calcule les valeurs moyennes RGB sur une p√©riode donn√©e afin d'√©tablir la base de comparaison.
        """
        print("üõ†Ô∏è Calibration en cours... Ne touchez √† rien pendant 5 secondes.")
        nb_mesures = 0
        somme_r = somme_g = somme_b = 0
        debut = time.time()
        while time.time() - debut < self.calibration_duration:
            r, g, b = self.sensor.color_rgb_bytes
            somme_r += r
            somme_g += g
            somme_b += b
            nb_mesures += 1
            time.sleep(0.1)
        self.ref_r = somme_r // nb_mesures
        self.ref_g = somme_g // nb_mesures
        self.ref_b = somme_b // nb_mesures
        print(f"‚úÖ Calibration termin√©e. RGB de base : R={self.ref_r}, G={self.ref_g}, B={self.ref_b}")

    def detect_color(self, r, g, b):
        """
        D√©termine la couleur dominante √† partir des valeurs RGB mesur√©es.

        :param r: Valeur du rouge.
        :param g: Valeur du vert.
        :param b: Valeur du bleu.
        :return: Un str indiquant la couleur dominante ("rouge", "vert", "bleu" ou "ind√©termin√©").

        QUI: Vergeylen Anthony
        QUAND: 09-04-2025
        QUOI: Compare les composantes RGB pour identifier laquelle est la plus √©lev√©e.
        """
        if r > g and r > b:
            return "rouge"
        elif g > r and g > b:
            return "vert"
        elif b > r and b > g:
            return "bleu"
        else:
            return "ind√©termin√©"

    def monitor(self, car_launcher):
        """
        Surveille en continu le capteur RGB et, en cas de d√©tection d'une couleur dominante verte,
        d√©clenche le lancement du contr√¥le autonome de la voiture via l'instance fournie.

        :param car_launcher: Instance de CarLauncher permettant de lancer la voiture autonome.

        QUI: Vergeylen Anthony
        QUAND: 09-04-2025
        QUOI: Mesure les valeurs RGB, compare avec la calibration et d√©clenche le lancement de la voiture
              si la couleur dominante est le vert.
        """
        print("üïµÔ∏è D√©tection des couleurs en cours...")
        car_launched = False
        while True:
            r, g, b = self.sensor.color_rgb_bytes
            ecart_r = abs(r - self.ref_r)
            ecart_g = abs(g - self.ref_g)
            ecart_b = abs(b - self.ref_b)
            if ecart_r > self.threshold or ecart_g > self.threshold or ecart_b > self.threshold:
                couleur = self.detect_color(r, g, b)
                print(f"R: {r}, G: {g}, B: {b} -> Couleur d√©tect√©e: {couleur}")
                if couleur == "vert" and not car_launched:
                    print("‚úÖ Couleur verte d√©tect√©e ! Lancement de la voiture autonome.")
                    # Lancer le contr√¥le de la voiture dans un thread s√©par√©
                    car_thread = threading.Thread(target=car_launcher.launch)
                    car_thread.start()
                    car_launched = True
            time.sleep(1)


class CarLauncher:
    """
    Classe pour lancer le contr√¥le autonome de la voiture.
    
    QUI: Vergeylen Anthony
    QUAND: 09-04-2025
    QUOI: Instancie et d√©marre le module de contr√¥le autonome de la voiture.
    """
    def __init__(self):
        """
        Initialise l'instance de CarController √† partir du module go.

        QUI: Vergeylen Anthony
        QUAND: 09-04-2025
        QUOI: Pr√©pare le lancement du contr√¥le de la voiture autonome.
        """
        self.car_controller = CarController()

    def launch(self):
        """
        D√©marre la boucle de contr√¥le autonome de la voiture en appelant la m√©thode run() du CarController.

        QUI: Vergeylen Anthony
        QUAND: 09-04-2025
        QUOI: Active le contr√¥le de la navigation autonome de la voiture.
        """
        self.car_controller.run()

    def shutdown(self):
        """
        Arr√™te le contr√¥le autonome de la voiture et r√©alise les op√©rations de fermeture (arr√™t des moteurs, nettoyage des GPIO, etc.).

        QUI: Vergeylen Anthony
        QUAND: 09-04-2025
        QUOI: Stoppe la voiture, d√©sactive les moteurs et nettoie les ressources pour un arr√™t propre.
        """
        print("üîí Arr√™t de la voiture en cours...")
        self.car_controller.cleanup()


class WebServer:
    """
    Classe pour g√©rer le lancement du serveur web bas√© sur Flask.
    
    QUI: Vergeylen Anthony
    QUAND: 09-04-2025
    QUOI: Lance l'application Flask pour permettre le contr√¥le via une interface web.
    """
    def __init__(self, host='0.0.0.0', port=5000):
        """
        Initialise les param√®tres d'h√©bergement du serveur web.

        :param host: Adresse IP √† utiliser pour h√©berger le serveur (par d√©faut '0.0.0.0').
        :param port: Port √† utiliser pour le serveur (par d√©faut 5000).

        QUI: Vergeylen Anthony
        QUAND: 09-04-2025
        QUOI: Configure l'adresse et le port pour le serveur web.
        """
        self.host = host
        self.port = port

    def run(self):
        """
        D√©marre l'application Flask sur le host et le port sp√©cifi√©s.

        QUI: Vergeylen Anthony
        QUAND: 09-04-2025
        QUOI: Lance le serveur web pour l'acc√®s via le navigateur.
        """
        print(f"üåê Lancement du serveur web sur {self.host}:{self.port}")
        app.run(host=self.host, port=self.port)


class MainController:
    """
    Contr√¥leur principal orchestrant l'ex√©cution des services:
    - D√©tection de couleur via le capteur RGB.
    - Lancement du contr√¥le autonome de la voiture.
    - H√©bergement du serveur web.

    QUI: Vergeylen Anthony
    QUAND: 09-04-2025
    QUOI: Initialise et d√©marre en parall√®le l'ensemble des fonctionnalit√©s de la voiture autonome.
    """
    def __init__(self):
        """
        Initialise les instances des contr√¥leurs RGB, de la voiture autonome et du serveur web.

        QUI: Vergeylen Anthony
        QUAND: 09-04-2025
        QUOI: Pr√©pare les composants principaux du syst√®me pour le d√©marrage.
        """
        self.rgb_sensor = RGBSensorController(threshold=5, integration_time=100, calibration_duration=5)
        self.car_launcher = CarLauncher()
        self.web_server = WebServer(host='0.0.0.0', port=5000)

    def start_services(self):
        """
        D√©marre l'ensemble des services en les ex√©cutant dans des threads s√©par√©s :
        - Calibration du capteur RGB.
        - Lancement du serveur web Flask.
        - Surveillance en continu du capteur RGB pour d√©clencher la voiture autonome en cas de d√©tection de vert.
        
        La m√©thode reste active jusqu'√† une interruption clavier (CTRL+C), √† partir de laquelle elle
        d√©clenche la fermeture propre des services.

        QUI: Vergeylen Anthony
        QUAND: 09-04-2025
        QUOI: Orchestre et d√©marre les diff√©rents composants du syst√®me de contr√¥le de la voiture.
        """
        # Calibration du capteur RGB
        self.rgb_sensor.calibrate()

        # Lancer le serveur web dans un thread s√©par√©
        server_thread = threading.Thread(target=self.web_server.run)
        server_thread.daemon = True  # Ce thread se termine avec le programme principal
        server_thread.start()
        print("üåê Serveur web lanc√©.")

        # Lancer la surveillance du capteur RGB dans un thread s√©par√©
        sensor_thread = threading.Thread(target=self.rgb_sensor.monitor, args=(self.car_launcher,))
        sensor_thread.daemon = True
        sensor_thread.start()
        print("üîé D√©tecteur RGB lanc√©.")

        # Boucle principale pour maintenir le programme actif et attendre une interruption
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("üõë Arr√™t du programme principal.")
            self.shutdown_services()

    def shutdown_services(self):
        """
        Arr√™te et nettoie proprement tous les services en cours d'ex√©cution, incluant
        l'arr√™t de la voiture autonome.

        QUI: Vergeylen Anthony
        QUAND: 09-04-2025
        QUOI: Appelle les proc√©dures de fermeture pour arr√™ter la voiture et nettoyer les ressources.
        """
        print("üîí Fermeture des services en cours...")
        self.car_launcher.shutdown()
        print("‚úÖ Services ferm√©s proprement.")


if __name__ == '__main__':
    main_controller = MainController()
    main_controller.start_services()
